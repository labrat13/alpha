++ Неймспейсы Команд Оператора

Мне надо чтобы Оператор показывал мне, какие у меня есть вклады и вообще деньги.
- Хорошо бы еще записывал и собирал сканы чеков, формировал отчеты по доходу-расходам итп.
- сейчас мне нужно посмотреть, когда кончится мой депозит, чтобы переоформить его получше.
-- для этого надо занести его данные или в календарь-планировщик, или в какой-то документ.
-- мне это нужно посмотреть со смартфона, так как я вспоминаю про это где попало, совершенно случайно.
-- Можно напоминалку поставить на некую дату заранее, чтобы запланировать работы по этой теме.
-- Это надо в Операторе завести БД данных моих вкладов - одну или две записи. Для БД это слишком сложно, а вот Тапп в этом плане проще кажется.
-- Я сейчас не могу придумать, как эти данные о вкладах хранить и использовать, кроме вот этих напоминания планировщика и текстового файла. Мне что-то сложные какие-то способы приходят в голову, но решение явно проще, чем кажется.


 

Пространства имен для команд

Это сложная штука, и ее пока отложим на будущее, пока она не стала необходимой.

Пользователь не помнит большую часть команд Оператора.
Все удобство и псевдоестественность Оператора в том, что некая произвольная команда пользователя, с некоторой вероятностью, совпадает с уже имеющимися командами Оператора. То есть, вот этот объем имеющихся команд Оператора, в какой-то мере, покрывает пространство вариантов команд, которые создает пользователь. Создается иллюзия, что Оператор понимает, что хотел сказать пользователь.
Все команды более-менее однотипные, любая команда пользователя уже более-менее входит в массив команд Оператора.
А если нет, то ее надо добавлять вручную: как синоним уже существующей команды (другой ярлык уже существующей процедуры) или как новую команду (новую процедуру и ярлык для нее).


Короче, это похоже на систему меню, вроде меню приложения, но в меню можно только выбрать действие, а параметры действия надо вводить в отдельной форме. А тут в РИ и действие и параметры вводятся сразу, создается иллюзия полноценного РИ. Хотя все же поьребуется список существующих команд с их описаниями и даже, возможно, расширенной справкой с примерами использования.



Надо группировать команды по разделам-контекстам-namespaces. Например, Оператор.Деньги или Оператор.Финансы (это синоним)
То есть, у неймспейса могут существовать синонимы. Так они лучше покрывают семантическое пространство РИ.

Неймспейсы можно использовать в справке по командам.
Команды входят в неймспейсы как в разделы, группы функциональности. Возможно, сразу в несколько неймспейсов - Это вроде как теги получаются тогда.

Команде надо сопоставить неймспейс уже в таблице команд в БД.
Предлагалось сопоставить неймспейс и процедуру, но решено было отказаться, так как процедуры образуют АПИ, и команды используют эти процедуры в разных случаях. Лучше сопоставлять неймспейсы и команды.

И этот неймспейс можно бы указывать Оператору как начало сеанса работы в некотором контексте. Например, Инвентарь. Без этого контекста команды будут путаться при показе в справке по командам - пользователь будет их путать. И при вводе команд пользователь не сможет выбрать/указать Оператору, что он имел в виду. 

Вернее так:
- контекст это, вот например, Инвентарь. Для него есть команды типа найти предмет, найти КТ315Б, добавить предмет, создать категорию, удалить предмет, итд. 
- сеанс работы пользователя это не сеанс работы Оператора или всего компьютера или пользователя компьютера, а один подход к компьютеру, вроде работы за компом и перерывов.
- каждая команда сопоставлена некоторому контексту.
- разные команды могут иметь одинаковые тексты. Из-за шаблонов с аргументами команд невозможно точно обеспечить уникальность команд. Это  трудно будет проверить при создании команды итд.
- в начале сеанса пользователь может указать, какие именно контексты он намерен использовать.
-- Это что-то вроде include получается.
-- Несколько контекстов одновременно можно включить, и даже собрать из них производный контекст. Например, обычная работа предполагает один набор контекстов, а разработка софта - другой набор контекстов. Пользователь будет явно эти контексты объявлять в начале сеанса своей работы, или использовать типичный контекст по умолчанию.
- команды выбираются из БД команд согласно активным контекстам.
-- если команда в активном контексте не найдена, выдается сообщение - пока не знаю, как это выглядит.
-- если найдено несколько подходящих команд из разных контекстов, выдается сообщение о выборе команды из списка вариантов - не знаю пока точно, что делать.
-- если найдена одна подходящая команда или несколько команд из одного контекста, то они выполняются в порядке приоритета или запросом пользователя - пока тут не знаю точно.

