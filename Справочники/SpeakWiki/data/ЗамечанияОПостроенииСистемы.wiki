++ Замечания О Построении Системы

Обучение Секретаря требует диалог между ним и Пользователем, и субъект диалога - Консоль как средство выполнения действий.
Этот диалог можно организовать как чат - хорошо отработанную концепцию. Участники чата Пользователь, Секретарь и Консоль отправляют свои сообщения и получают от сервера чата сообщения других участников.

Для Секретарьа, Консоли и Пользователя в чате нужны ники. По ним все участники чата будут различать, кому адресованы сообщения. Ник вводится Пользователем в начале сообщения, чтобы указать адресата. Эти ники желательно сменяемые, а для просмотра истории чата, прошлые ники должны храниться где-то в самом чате.
Это можно сделать сообщением чата о смене ника участника.
    * Где будем хранить ники участников? Удобно их на сервере хранить, а получать с него ники специальным запросом в начале сеанса чата. При интерпретации сообщений заменять ники на объекты участников чата.

Сообщению чата еще нужен таймштамп с точностью до миллисекунд, который легко было бы из текста превратить обратно в объект.

+++Устройство чата
Сервер чата по [Команда]е Пользователя или Секретарьа может создавать Консоли для консольных приложений. Эти консоли подключаются к серверу чата как обычные участники. Секретарь и Пользователь работают в отдельных процессах, соединяясь с сервером чата через TCP. У Пользователя есть типичный клиент чата. У Секретарьа свой специальный клиент чата.
    * Синхронизация и Блокировка?
VirtualBox можно использовать как среду для отладки такой многомашинной сетевой конфигурации. Тогда падение одного процесса совсем не скажется на всем проекте. Консоль обязательно надо запускать на виртуальной машине, чтобы она, Секретарь или Пользователь, не смогли ничего сломать в реальной системе и испортить весь проект.

+++Интерпретация сообщений Секретарьом
Для интерпретации сообщений Секретарьу нужна модель ситуации. А для нее нужен Тапп24. Этот движок Тапп24 желательно сделать с локальной БД вроде sqlite - это выглядит маленьким локальным хранилищем данных, с которым удобно экспериментировать.
По этой модели Секретарь будет строить вопросы и ответы. 

И полезен был бы граф сущностей, наполненный предварительно из текстов, чтобы находить в нем аналогии, делать классификации и предсказания. 

+++Консольные приложения
Примером консольного приложеия служит cmd.exe. От прочих консольных приложений он отличается тем, что завершается по специальной [Команда]е, а не после выполнения [Задача]и.
Для работы в чате, консольное приложение заключается в Консоль, которая обеспечивает идентификацию участника и пересылку строк в приложение и в чат. Поток ошибки и поток вывода консольного приложения объединяются. Ну или поток ошибки можно пометить специальным заголовком, хотя это все равно недостаточно строго соблюдается в самом консольном приложении.
Консоль создается и запускается сервером чата по специальной [Команда]е от одного из участников чата. При создании нуно указать имя нового участника, рабочий каталог, путь и аргументы исполняемого файла, при необходимости также имя пользователя и пароль. Участник присоединяется к чату.
Сообщения от участника и к участнику доставляются по имени участника. Даже можно предложить для консольного приложения отправлять сообщения конкретному участнику через чат, организовав таким образом обмен данными между приложениями через чат. Хотя это неудобно при анализе работы Секретарьом, но тут можно что-нибудь придумать, чтобы и то и другое работало хорошо. 
Исполнение может быть прервано специальной [Команда]ой от одного из участников чата. 
После заверения работы приложения консоль посылает в чат сообщение об окончании работы участника и завершается. Участник покидает чат.
todo: следует ли ввести раздельные сеансы для каждого участника? Это позволило бы отделять контексты КонтекстЗадачи в общем логе, так как каждая [Задача]а выполнялась бы участником в своем сеансе.
todo: следует ли представить всех участников как исполнителей [Задача]? Например, Пользователь обычно исполняет [Задача]у "Создание нового запроса", а остальные участники ждут этого события. Такой унифицированный подход мог бы немного упростить построение системы.
* Как Консоль будет скакать по каталогам? Если надо будет ее подвинуть?
Если надо скакать по каталогам - надо запускать cmd.exe. А для выполнения консольног приложения каталог надо указывать сразу точно, и потом переходить в другой каталог в консольном приложении не нужно.
 
+++Вопросы
* можно ли для виндовой консоли cmd.exe перенаправить std:in std:out std:err потоки в С# приложение?
    * есть метод file:///V:/Projects/РечевойИнтерфейс/Материалы/redirectstdin.7z
    * [//ПерехватСообщенийКонсольногоПриложения]
* Как должен выглядеть диалог Секретарьа, Пользователя и Консоли?   
* Как пользователь должен формулировать вопросы или ответы?
* Как Секретарь должен формулировать вопросы и ответы?
* Как перехватить окончание запущенной программы?
    * Process.WaitForExit() - не проверял
* Как устроен чат на С#?
    * Нашел материал file:///V:/Projects/РечевойИнтерфейс/Материалы/chat.7z  
* Как организовать подключение нескольких участников к одному порту сервера чата?
    * Тема старая, решение где-то должно быть. Обычно публичный порт только регистрирует участников и раздает им новые порты.  
