++ Субкоманды Внутри Диалогов
Эти слова участвуют в Речевом интерфейсе, их надо выделить в концепции, я пока совсем не проработал эту тему.

Для диалогов сейчас предполагаются стандартные ответы Да и Нет, либо ответы в свободной форме.
Субкоманды вводятся пользователем вместо ответов на вопросы Оператора.
Пользователь вводит субкоманды вместо ответа на вопрос Оператора.
Субкоманды имеют фиксированные тексты, поэтому код обработки диалогов может их выявить и обработать.
Субкоманды работают (только?) внутри диалога процедуры.

Внутри диалогов будут полезны субкоманды:
* Отмена - отменяет весь диалог процедуры, то есть, всю процедуру.
* Прервать - прервать выполнение текущего шага диалога
* Повторить - повторить последний начатый шаг диалога, при неуспехе обычно.
* Пропустить - пропустить текущий шаг диалога
* Отложить - законсервировать состояние диалога процедуры, отложить ее на неопределенное время. (Пока неясно, как реализовать это.)

Допустимые варианты субкоманд можно вывести в тексте запроса пользователю:
> Введите название места: [Отмена/Отложить]
< Отмена

Из этого следует, что названия Мест, Процедур и других элементов среды Оператора не могут совпадать с каким-либо вариантом стандартных ответов и субкоманд. Так как движок Оператора посчитает введенный текст субкомандой и соответственно отреагирует. 

+++Реализация
Субкоманды сейчас обрабатываются классом Lexicon.Dialogs
Енум Lexicon.SpeakDialogResult представляет коды стандартных ответов и субкоманд.

++++Специальные кнопки ответов
Ранее я думал завести специальные кнопки Да Нет Отмена для таких диалогов - экранные или клавиатурные. А то набирать Да Нет - долго очень. И на клавиатуре нет таких кнопок выделенных. Даже не знаю, какие клавиши на них привязать. Пока буду текстом вводить.
* question: Как вводить такие ответы быстро и без ошибок?
* question: Будет ли ввод ответов Да Нет выделенными кнопками заметно удобнее, чем буквами?
    * Думаю, нет. Они нечасто требуются, предположительно. 

++++Идея Файл диалога процедуры
Сейчас диалоги процедур зашиты в коде, но можно вынести их в текстовый файл описания шагов диалога. Там можно будет выставлять для каждого шага диалога флаги доступных субкоманд и общий ход алгоритма диалога процедуры. Пока это теоретическая возможность, сейчас лучше весь диалог реализовать в коде, так как непонятно, как его строить вообще-то.