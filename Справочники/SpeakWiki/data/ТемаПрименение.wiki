++ Тема Применение

* СборСценариевРаботыПользователя
* ПрименениеРИ - сбор материала для формирования выводов и решений.
* ИсследованиеЧтоПользовательДелаетНаКомпьютере
* ЗаметкаПрименениеОператорВАнализеДанных
* ЗаметкаПрименениеОператор1
* ЗаметкаПрименениеОператорПредлагатьКнигиДляЧтения
* ЗаметкаПрименениеОператорСоветы
* ЗаметкаПрименениеОператор4
* ЗаметкаНужныеКомандыОператора - todo: Собирать тут востребованные команды 
* ЗаметкаСборкаДляРаботыСИзображениями
* ЗаметкаРаботаПользователяНадПроектомВОператоре - большая важная заметка!
* ЗаметкаПроцессыИОператор
* ЗаметкаЧтоДелаетОператор
* ЗаметкаОбсуждениеНапоминалка
* ЗаметкаКомандыДляРаботСФайлами
* ЗаметкаПрименениеУправлениеПроектами
* ЗаметкаПрименениеИИОператор
* ЗаметкаОператорИПроекты
* ЗаметкаПоддержкаПриложенияЗаметкиВОператоре
* ЗаметкаРаботаСОператором
* ЗаметкаОператорПредлагатьЗадачи - применение
* ЗаметкаДобавитьВОператор
* ЗаметкаПрограммыВиндовс
* ЗаметкаОператорИХранилища
* ЗаметкаИдеяВнедритьТерминал
* ЗаметкаКомандыВиндыДляКомандОператора - для создания из них команд Оператора
* [rel://files/Как создать крутой экшен для Google.doc]
* [rel://files/Пути ярлыков панели управления.rtf]
* ЗаметкаПроблемыСОператор
* ЗаметкаРазвернутьОператорНаКомпе

+++Что с Оператор
Я им не пользуюсь, так как нет применений.
* Он не работает с моей рабочей средой.
* Он ничего полезного не умеет делать.
* Главная проблема - мало возможностей. Их надо добавлять. Хотя бы автоматизировать управление сущностями и операциями.
* В нем сейчас фиксированная система команд. А я эти команды не помню, поэтому ввожу команды свободным текстом.

+++Разные выводы
Только все это надо делать, а в это время некогда заниматься тем, для чего все это нужно. Соответственно, надо сосредоточиться на том, для чего нужны эти планировщики, а не на изготовлении игрушек. Я слишком занят расходной частью, и не работаю над доходной частью процесса.

Можно более мне специализироваться на обработке естественного языка, 
чтобы быстро интегрировать голосовой интерфейс в разрабатываемые приложения. 
Если я сосредоточусь на этом направлении, то будет определенный спрос на рынке. 
Но этим надо заниматься, и еще вопрос, удастся ли мне реализовать этот потенциал.
Пока что у меня стабильно плохо с этим.

И тут нужен проект КоллекцияСлов. который хранит слова, обозначающие сущности, и у которых есть еще формы - оттенки, которые обозначают смысл применения сущностей в контексте запроса. Это надо где-то хранить, поэтому нужен еще и Тапп24, нормальный, полноценный с методами. И эту систему надо еще расширять, ориентируясь на классы слов как классы сущностей. 

+++Примеры применения

++++Пример: Планировщик задач.

Такая система должна работать подобно тому как сделано в Инвентаре, но еще и выводить данные.
Например, можно, как в википаде, обозначать [Задача]у ключевым словом Сделать: 
СДЕЛАТЬ Название задачи ГДЕ перечень свойств задачи подобно Инвентарь.
СДЕЛАТЬ Название задачи С дата начала ДО Дата окончания ГДЕ перечень свойств задачи подобно Инвентарь.

Это такой достаточно фиксированный формат скрипта создания [Задача]и получается, близкий к обычному способу описания [Задача]и. 
+++++Недостатки:
- надо помнить формат - это проблема, даже если его описание легко доступно. В частности, надо помнить имена параметров. В диалоге эти имена отображены надписями и контролами, понятны и удобны для манипуляций. В тексте таких подсказок нет, надо помнить имена и типы данных для параметров. Но можно использовать уточняющие вопросы или интерактивные контекстные подсказки, это несколько упростит работу.
- много текста надо набирать - ну, это вот такой способ, речевой, основанный на семантике и сущностях. Зато изучать ничего не надо, сиди себе и набирай тексты.
+++++Достоинства:
- [Задача]а создается простым текстом, удобна для восприятия и кроссплатформенно.
- Не надо запоминать особенности поведения графического интерфейса.

Эту тему можно развить до того, чтобы просто текстом управлять всем этим планировщиком и ведение [Задача] и всем остальным.
Инвентарь удобно интегрировать в планировщик, чтобы ресурсы для [Задача] выделять и наоборот, связывать [Задача]и по обслуживанию ресурсов с самими ресурсами.
Также удобно в планировщик интегрировать файловое хранилище, как систему хранения документов. И прочие наработки по проекту органайзера.



+++Накопление функциональности
Оператор должен позволить мне постепенно копить способы выполнения работ.
Каждый такой способ, однажды воплощенный в [Процедура]у, избавляет меня от необходимости вспоминать или заново открывать законы, зависимости, способы и методики, сущности. Я просто запускаю [Команда]у и получаю результат. и использую его.
Мне нужно один раз изучить тему, разработать [Процедура]у, отладить ее, описать в документации. И все это затем можно забыть и просто пользоваться.

Нужен уже переход количества в качество.
* Резкого скачка не получается. Нужен постепенный переход - например, изготовление и накопление [Процедура]. Вот в долгосрочном масштабе времени это получается качественный скачок. Но это займет много работы.

+++Дополнение БД ответами на вопросы
Можно через Оператор отвечать на отложенные вопросы по заполнению свойств Сущностей для БД Оператора и других БД. Обычно пользователь может отложить определение некоторых свойств Сущностей, чтобы ускорить свою работу. А потом эти отложенные свойства запрашиваются у пользователя в свободное время. Вот такие вопросы можно задавать пользователю через Оператор по собственной Бд Оператора или Органайзера итд. Это подробнее описано в Органайзере.

+++Автоматизация
Можно автоматизировать настройку ОС в начале сеанса Пользователя. 
Например, яркость дисплея установить удобную. Или запускать постоянно используемые приложения. Это сэкономит время и еще чего-нибудь.
    * Только у меня нет таких постоянно используемых приложений. У меня большое разнообразие в работе.
* Еще напоминания, Задачи, Органайзер в целом. Это позволит решать [Задача]и, не забывать про них. Повысит мою реакцию на окружение.
    * Плохо, что они пока что только отнимают время на разработку, отладку, тестирование и совершенствование.  

+++ Работа с чужим окном
Работа с окном стороннего приложения через Оператора - назовем это Абордаж.
Это требует:
    * Указание и захват окна. Это можно реализовать одной [Команда]ой На абордаж.
    * Выполнение Оператором [Команда]ы для захваченного окна.
    * Освобождение захваченного окна [Команда]ой.
* Это требует КонтекстЗадачи, чтобы увязывать [Команда]ы и захваченное окно. А этого КонтекстЗадачи пока нет в Операторе.
* И Оператор, и окно - цель Абордажа должны быть видны на экране монитора. Для этого Оператор нужно сделать Topmost-окном (поверх всех окон всегда), как в моей экранной клавиатуре. 

+++ Идея Блокнот Для Работ С Текстами

Текстовый редактор вроде Блокнот, в котором пользователь мог бы совместно работать с Секретарьом. Секретарьу нужен АПИ для манипуляций с текстом, а пользователь мог бы наблюдать и исправлять. 

Секретарь мог бы с помощью этого приложения читать и создавать текстовые документы через АПИ. Пользователь мог бы их просматривать и дополнять, одновременно давая указания Секретарьу через встроенный диалоговый механизм.

+++Как органайзер и секретарь
Для работ по проектам полезен секретарь, обеспечивающий формальное ведение проектов, записей и разные прочие [Задача]и. 
Секретарь в проекте РИ может стать таким помощником. На него можно взвалить напоминания, соблюдение workflow и методик.

+++На смартфоне
Можно развернуть систему на смартфоне, чтобы она была всегда при мне.
Недостатки:
* сложно текст набирать.
* доступ к моим архивам со смартфона недостаточно защищен и удобен
* смартфон сливает данные всяким гандонам
* это пригодно только для уже развитой системы, а ее смарфон сольет всяким гандонам.
* Вывод: нынешние смартфоны непригодны для любой работы.

+++Применение РИ
Это программа, которая работает на компьютере.

Что она делает:
-принимает введенные с клавиатуры тексты - [Команда]ы
-выводит на экран тексты-сообщения
-выполняет [Команда]ы, производя некоторые изменения в содержимом компьютера.

Для чего она может использоваться:
- для отработки технологий
- для выполнения операций на компьютере.
  - эти операции надо сначала алгоритмизовать и написать скрипт или программу.

В сущности, эта программа предоставляет для всех прочих программ единый интерфейс.
Реальная же работа должна осуществляться специально разработанными скриптами и программами.
Которые эта программа скрывает за единообразным интерфейсом.
Именно эти скрипты и программы выполняют реальную работу на компьютере.
Именно их количество повышает производительность пользователя компьютера.
Эта программа только придает всему этому комплексу удобный единообразный интерфейс, который сокращает затраты пользователя на использование всех этих разных инструментов.
И для каждого инструмента эту программу надо настраивать.

Теоретически, каждая [Процедура]а реализует некий СценарийИспользования.
Как в UML, этот сценарий должен быть спроектирован и назван.
В рамках этого сценария, есть некая конечная цель - конечное состояние системы, которое должно быть достигнуто в ходе выполнения сценария.
И есть [Алгоритм], способ, которым достигается результат.

В настоящее время рассматриваются сценарии очень простые, поверхностные, вроде Открыть плеер.

Однако можно попробовать и более сложные сценарии собственно работы над [Задача]ами.
Проблема тут в том, что [Задача]и у меня в основном одноразовые. 
Их я могу выполнять вручную. Это проще, чем писать [Алгоритм]ы на каждый чих.
А автоматизировать нужно повторяющиеся [Задача]и. 

И еще одна проблема - мне нужно сохранять эти настройки автоматизации, чтобы потом восстанавливать их автоматически, а не вручную, после переустановки операционной системы.

Итак, после собственно первичного внедрения этого прототипа РИ, нужно задуматься о применении его в моих проектах на повторяющихся [Задача]ах. Для этих [Задача] придется написать программы-исполнители и добавить их в прототип РИ.

Еще можно подумать о том чтобы более глубоко разбирать семантику предложений. Например, не просто тупо искать совпадение по шаблону, а понимать простое предложение: выделять действие и его сущности-аргументы, и признаки действия или сущности. 
Например: Создай в моей музыке новую папку и добавь в нее все музыкальные файлы из флешки.  
Механизм должен собрать из этого текста [Алгоритм], проверить его на непротиворечивость, подставить параметры по умолчанию, смоделировать исполнение и затем исполнить.
Но этот механизм нельзя реализовать без проектов Тапп и Вордс.

* Честно говоря, программой пользоваться не так уж удобно - надо помнить все эти [Место]а и названия [Процедура]. Хотя они и приближены к обычной речи, но все же их надо помнить или наугад набирать. Просто их должно быть меньше. У меня сейчас много проектов и [Задача] по ним, вот я и живо представляю себе весь этот объем названий сущностей, которые надо помнить.
* Тут можно еще предложить по любому старому проекту вызвать лог работ (процедур), чтобы просмотреть его и понять, на чем проект остановился. Винда сейчас такое не позволяет делать. Да и этот прототип РИ тоже не позволит, так как нет поддержки КонтекстЗадачи, поэтому нельзя отобрать события по этому контексту.
* Надо все же сделать это меню [Место] и  [Процедура] - оценить, насколько это мне поможет ориентироваться в [Место]ах.
* Для голосового управления этот РИ отлично подходит. Можно прямо сейчас даже попытаться навесить хотя бы говорение. Хотя ввод все равно с клавиатуры будет. Не, лучше музыку слушать.  

++++Расчеты тематические
* можно использовать РИ как консоль проекта Матч. Хотя код Матч не пригодится никак, но вот строковые ресурсы и сами операции можно реализовать в Операторе. Чтобы просто набрать Вычислить энергию конденсатора, и ввести данные в речевом диалоге и получить результат. Это можно реализовать как код, в отдельной сборке.
    * Такая сборка должна содержать также и объекты - записи [Процедура] для списка [Процедура]. И они должны загружаться в Оператор при старте Оператора. Но это приведет к тому, что все имеющиеся сборки будут загружены в память Оператора в начале работы. Поэтому надо их выгружать после сбора всех [Процедура] в список [Процедура]. А хорошо бы вообще загружать их все в отдельный домен, и выгружать его периодически, и заново загружать нужные сборки при следующем вызове.
    * И для этих тысяч [Процедура] придется ввести *поиск по ключевым словам*. Иначе в них я просто заблужусь. Это ведь не [Место]а. [Место] может быть и немного, но [Процедура] получится несколько тысяч - они же обеспечивают пользователя возможностями, и возможностей должно быть много. 
    
+++Развитие
Сейчас Оператор малопригоден к чему-либо. Он выполняет простые [Команда]ы.
Нужно добавить в него поддержку КонтекстЗадачи, чтобы выполнять сложные [Задача]и.
Поддержку распознавания смысла текста я не могу добавить, так как для этого сначала надо создать стабильную базу словоформ, которая бы постоянно, обыденно располагалась на компьютере и несколько интегрировалась бы уже в общую его работу.    
    
+++Наполнение контентом
Я не смогу за приемлемое время сделать Оператор действительно полезным. 
Такая работа требует:
* много времени
* знание каждой отдельной темы
* знание работ с Оператором
* дополнения и оптимизации для этой темы, проводимые со временем.
Привлечь других людей к проекту я не могу. 
Для этого нужно предоставить им Оператор и его систему сущностей. 
Но нельзя терять контроль над системой.
Без усилий других людей я весь функционал Оператора должен буду делать сам.
Он будет еле-еле покрывать основные мои работы.

С другой стороны, привлекать других людей не имеет смысла, пока Оператор не готов для реальной работы.
Они все только портят обычно. Все равно придется самому делать всю работу.

Для работы Оператора с другими пользователями нужно будет создать публичные общедоступные каталог Сущностей и каталог [Процедура].
Либо Оператор работает локально на машине порльзователя с полными правами, либо он работает на своем сервере, а машина пользователя - просто терминал IRC или браузер.

+++Как оператор ускорит остальные проекты
Как оператор позволит мне ускорить остальные проекты?
Оператор все равно надо делать.
Но время, затраченное на его разработку, сборку, отладку, отодвинет остальные проекты.
Сейчас надо выяснить, насколько оператор ускорит проекты, имеет ли смысл его делать в первую очередь.
Сейчас процесс разработки интерактивен, в [Команда]ной строке нечего делать. Поэтому Оператор тут малопригоден.
Это вероятно даже более сложный проект, чем остальные. Поэтому Оператор тут выглядит недостаточо пригодным. Он предполагает разработку множества сторонних технологий. Оператор просто автоматизирует работу, которую нужно продеоывать неоднократно. Он хорош в разборе множества однотипных объемов данных. То есть, например, в проекте Вордс, и то надо мудрить. Вордс это просто одноразовая но очень большая [Задача]а. И для таких [Задача] проще написать скрипт или приложение.
Оператор хорош будет в [Задача]ах, которые касаются ведения документации и каких-то повторяющихся ежедневных действиях - напоминаниях и прочим подобным.
Но моя работоспособность ограничена свободным временем. А я его трачу на всякую фигню, в том числе на эту диктовку текста. 
Так что оператор нам ничем особенно сейчас не поможет, разве что сократит объем путаницы немного. А на его разработку уйдет куча времени.

+++Создание нового проекта
Надо связать мою утилиту создания нового проекта и Оператор.

Надо переделать утилиту создания нового проекта - пусть распаковывает папки и вики-шаблон из архива. И живет в собственной папке в МоиПроекты. (Тогда надо распаковывать эту папку после восстановления из бекапа, а то работать не будет.)

И надо бы для разных типов проектов разные шаблоны проектов делать - вики разные и папки разные. А тип проекта запрашивать после названия проекта, при создании проекта.
Это редко используемая функциональность.

+++Автоматизация через Оператор
Я рассчитывал что Оператор будет выполнять автоматизацию операций. 
Автоматизировать надо выполнение мелких операций в предварительно настроенной инфраструктуре. Оператор задумывался как средство для такой автоматизации.
Именно он должен был включать в себя все эти работы, избавив меня от необходимости писать полноценные приложения, включающие в себя не только собственно процессинговый код, но и  файлы справок, иконки, итд. Эта мелочь занимает кучу времени.
Я мог бы писать только основной код, свалив все остальное на Оператор - там не нужны иконки и инсталляторы и все такое. 
Хотя с другой стороны, не было бы интеграции с рабочим столом. Я все-таки не работаю с консолью сейчас. Да и развертывание программы инсталлятором легкое. С Оператором было бы сложнее, это другой подход. 
Сейчас у меня работа над проектами сформировалась через концепцию рабочего стола, ярлыков и папок. 
Оператор это несколько другая концепция, и в ней работа с проектами выглядела бы иначе. Хотя я пока не знаю как именно. Наверно, мне пришлось бы помнить гораздо больше названий сущностей, чем сейчас. Сейчас я просто ищу их в тех местах, где они должны находиться, а не набираю в консоли запомненное точное название сущности.

Наверно, через Оператор можно все же автоматизировать некоторые операции. Особенно если Оператор будет в диалоговом режиме уточнять их параметры и запоминать умолчания. Но тут это скорее исполнение [Команда] пользователя. С КонтекстЗадачи. 

+++Можно попробовать его продавать, привязав к веб-серверу. 
На сервер должны отправляться тексты запросов.
Чтобы можно было их накапливать и развивать проект.

Но вот это будет проблемой. 
Никому серьезно этот проект не нужен - сам он документы составлять не будет, сам он некоторую любую работу делать не будет.
Он просто удобнее, чем обычно. Ну и для домашнего использования - прикольный и только. Без него можно обойтись.

А тексты запросов - из-за винды 10 - пользователи не желают делиться ничем вообще.
Тем более - с частным лицом, то есть, мной.

Надо закосить под фирму.
ОКБ Тупой. 28 лет занимается реверс-инжинирингом техники, в том числе, военной и инопланетной.
Хохма,  а вдруг прокатит.

Хотя, если как самостоятельный продукт оно не интересно, то вот в сборе с модулями речи и модулями Органайзер - вполне сойдет в качестве собственно органайзера.
Можно будет даже имя придумать: Картонна. Хорошее имя для Dll: Cartonna
++++Аргументы против распространения Оператора
Его нельзя раздавать ни в каком виде.
Он - мое конкурентное преимущество. Какое-никакое а лучше чем ничего.
Лучше я приделаю к нему чат на смартфон и буду держать Оператор на сервере домашнем.
А со смартфона [Команда]овать.
А так - узнают и в демо-версии украдут. 
Дома почти проходной двор. Оператор нельзя сейчас держать накомпе. Но и никак иначе нельзя.
Что же придумать?
* можно хранить на флешке, постоянно вставленной
    * Просто флешку можно с собой забирать - проще чем ноут вычищать от Оператора.  
    * автостарт будет работать?
    * так украдут флешку вместе с ноутом. 
* todo: Придумать что-то в этом плане.

+++Собирать лог настроения
Тут вроде где-то в позапрошлом году была идея о том, чтобы периодически отчитываться себе о своем настроении.
Чтобы выявить сезонные его изменения и всякие там зависимости.
Эти отчеты должны быть привязаны к дате и храниться удобно для анализа.
Вот только вести их мне не получается - я про них забываю. Так что я и не начинал.
Надо подумать - можно ли эти отчеты взвалить на Оператор.
Он должен периодически предлагать мне такие короткие вопросы, когда я работаю с ним.
А я мог бы на них отвечать (или не отвечать) и они бы записывались в отдельную БД для последующего анализа.
Тут важно, чтобы они были короткими, не прерывали мою работу, и не надоедали.
И еще они нужны в разное время дня, так как утром настроение одно, вечером - другое.
Поэтому придется поэкспериментировать с подачей, моментом итд.
И из-за того что они неполные, и в разное время, статистика будет малополезной.
Но чтобы она была полезной, надо эти отчеты запрашивать по пять раз в день. А это меня сильно раздражать будет. Да и не сижу я за компом с 8 до 17 каждый день.
И вот как такую задачу можно реализовать на Операторе? 
    * Запускать по таймеру - неудобно - я не всегда же за компом, и текущую задачу прерывать нельзя.
    * Запускать в пределах временного диапазона, и потом отслеживать удобный момент для показа?
    * Запускать перед завершением Оператора - нельзя. Мне надо завершить быстро, а не отвечать на философские вопросы.
    * Запускать после запуска Оператора - неудобно. Хотя можно, но часто отвечать в этот момент нет настроения.
    * Надо запускать в такой момент расслабухи, когда работа закончена, и образовался небольшой перерыв. Но тут без свободного диалога и наблюдения за пользователем не получится это определить.
    * В общем, это сложная задача в настоящее время. Хотя грубое решение найти можно.  

+++Интегрировать со студией
Оператор надо интегрировать с вижуал студио. или мне самому надо писать какие-то утилиты, которые будут работать с этой студией, или вместо этой студии, например запускать компилятор из [Команда]ной строки. Или преобразовывать граф в код [Алгоритм]а, а потом собирать все в файлы и компилировать. Кто будет разбираться с ошибками? Ошибка это следствие неправильно собранного [Алгоритм]а. Мне придется разбираться, почему [Алгоритм] был собран неправильно.  
Это большая работа, на которую у меня нет ресурсов. Поэтому сейчас надо сосредоточиться на практической части этой большой теории. 
Что мне даст Оператор, не считая загруженности на пару лет? Он позволит автоматизировать некоторые операции, которые я сейчас деляю Я запускаю некоторые нужные программы для работы, для музыки итд, тыкаю по всяким ярлычкам и контекстным меню . А там я бы мог просто набирать текст. Или даже прицепить к нему звуковой анализатор и произносить текст голосом.Но тут работы тоже много,хотя все же проще чем сейчас тыкать по всяким кнопочкам и меню . Этоведь надо разбираться, что куда относится, как организовано, и помнить, как это работает. Все это напрягает мозг, это работа, которвя мне не очень нужна,такая инфраструктурная работа. Как вот я сейчас перевожу записи диктофона в текст. А использовать их прямо как голосовые заметки - нет у меня условий, чтобы их прослушивать когда захочу. Да и поиска по ним нет. 
Интеграция с студией не прокатывает. там еще нельзя получить кодедом модель отдельно от студии. Хотя есть такие парсеры в проекте шарповой студии забыл как называется - она может сделать кодедом модель из файла кода, и у нее есть исходные коды, откуда можно этот механизм выдрать. Тогда мы можем получить кододом модель из файла.  
Речевой интерфейс должен меня избавить от понимания, что там происходит в программе, от необходимости анализировать информацию и пользовательский интерфейс программы. Я просто вбиваю чо я хочу и он делает. Ну хотя бы частично избавить, в этом случае он запускает приложение, с которым я в дальнейшем работаю. Но я могу писать новые приложения, где будет только речевой интерфейс, который избавит меня от этих менюшек и кнопочек. И можно будет легко и быстро делать автоматизацию этих операций.

Макросов что-ли наделать в студии для циклов и прочей хрени? Хотя это вряд ли хоршая идея. Надо еще помнить, к чему они там привязаны, как называются и что делают. Это потому, что я все время занимаюсь разными вещами. Много всяких разных проектов, поэтомму я не сосредоточен на одном виде деятельности. Это  убивает возможность существенно что-то автоматизировать. (Тут надо работать над уменьшением объема требуемых для выполнения работы знаний. Эта автоматизация должна уменьшать число элементов-знаний, задействованных при выполнении работы. Как вот подсчитать эти элементы-знания? ) Так как оно используетсявсего раз-два, то вся контекстная информация о наличии и свойствах возможности автоматизации операций очень медленно накапливается. 
Речевой интерфейс должен сократить это разнообразие используемых знаний, и облегчить автоматизацию работ. И для него надо сделать Тапп24.

+++Как Оператор улучшит мои работы

Как Оператор может улучшить мои возможности?
Это вторая уже заметка на эту тему - попробую тут сжато изложить тему и потом, возможно, развить ее.

1) Оператор может создать мне новые возможности
- я пока не представляю себе, что это за новые возможности, но в теории это полезно.
2) Оператор может частично автоматизировать существующие у меня процессы.
- тут все правильно, это я хочу получить.
3) Оператор может выполнять работы, пока я занят другими делами и не могу работать над моими проектами.
- Например, может выкачивать из интернета какие-то данные. 
-- Хотя их сначала надо найти и выяснить, как скачать, но это все же не то, что сидеть и качать вручную.
-- Это предполагает, что я могу вести диалог с Оператором, пока где-то занят - через смартфон и интернет.
- Или автоматически конструировать что-то, но это пока фантастика.

Так, тут есть новый термин - процессы.
Все мои работы это, в сущности, процессы. 
Я их выполняю по неким алгоритмам, манипулируя сущностями реального мира.  
Эти процессы хорошо бы формально записать как-то где-то, чтобы потом подумать, как их можно частично автоматизировать, используя базы данных и алгоритмы.
Так можно сократить часть работ, снизить сложность процесса и ускорить его в итоге. Хотя не всегда.
Какие-то кусочки процессов удастся автоматизировать, но не весь процесс целиком, точно.

У меня в основном процессы либо работают с сущностями реального мира, которые нельзя завести в компьютер для автоматизации, либо требуют умственного труда, который пока сложно автоматизировать. 
В этом еще есть проблема - существующие приложения и инструменты не поддерживают автоматизацию их использования. 
Например, википад нельзя использовать из другого приложения так, чтобы автоматически читать и писать страницы в нем. Хотя там есть какая-то автоматизация, но ее использовать еще сложнее, чем написать собственный википад с требуемыми функциями.  

Выводы пока такие:
- Я совсем не понимаю, что именно нужно делать. И написание текстов не проясняет ситуацию, а запутывает ее.
Надо или найти хорошую книжку по этой теме, или накопить больше материала, чтобы этот туман стал обретать формы.
- Надо документально описать мои процессы, чтобы попытаться их автоматизировать. Это должны быть сложные процессы, потому что автоматизация должна окупиться. Пример: Бекап проектов - столько возни с ним вручную было. Сейчас запустил, ушел пить чай. Но это должны быть небольшие кусочки, так как только в них можно реализовать такой прямой и жесткий алгоритм выполнения работы, какой можно реализовать кодом. Более сложные веши кодом нельзя пока реализовать.
-- сначала надо отобрать такие процессы в список. Потом неоднократно пытаться их формально описать, придумывая правила описания в процессе самого описания. Потом выделять в них куски - функциональную декомпозицию провести. Потом отобрать те части, что можно автоматизировать. Потом собрать все это обратнов процессы. Это сложная работа, и не всегда это получится лучше чем было раньше.
- Сейчас рабочей силой пока являюсь я сам. Разгрузка меня от мелких формальных задач ускорит мою работу. Но сначала эта мелкая формальная задача превращается в большую проблему, которую я пытаюсь автоматизировать. Только после того, как я напишу достаточно универсальный алгоритм, эта задача становится более-менее решенной. И эти описания решений автоматизации потом надо где-то хранить, чтобы не забыть, как и почему они устроены, и в каких ситуациях они неприменимы. Вот хорошо бы это хранить вместе с самим алгоритмом, чтобы не забывать и находить вовремя.
-- можно в Оператор внести эти штуки. Эти методы. И потом с ними работать. Обслуживать их. Еще и их придется обслуживать... Будет ли выигрыш в этой автоматизации? Надо продумать этот аспект.

Мысли вслух
Оператор задумывался как средство выполнения моих команд. Как возможность автоматизировать работы, сосредоточиться на целях, не отвлекаться на всякие инфраструктуры: где разместить фотку, чем открыть, где она сейчас лежит, итд. Я хотел, чтобы мне остались функции управления: выбор объекта, выбор метода, принятие решений итп. Чтобы мне работать только с семантикой: название объекта, название алгоритма, а Оператор сообщал мне о успехе или предупреждал о ограничениях и прогнозировал успех или неудачу исполнения.
Сейчас Оператор очень простой, и может только комп выключать и музыку запускать, ну и открывать указанные файлы. Это я и сам делаю мышкой. Я его забросил пока, не развиваю, так как он пока не способен на большее. А его текстовый интерфейс мне пока не нравится - проще мышкой кликать сейчас. Вот с этим надо что-то делать. А больше некому, кроме меня.  

Сейчас получается два способа работы на компьютере: ГУЙ с мышкой и консоль Оператора. ГУЙ привычный и разнообразный, детальный способ. Текстовый интерфейс Оператора пока очень примитивен. Ему не хватает проработанности и он требует настроенной для него системы. Вот и функциональность у него никакая. Хотя идея вроде бы ничего так - не искать, где лежит, а просто описывать текстом, что я хочу сделать и с чем. Но пока приходится искать, где лежит.
    
+++Идея автоматизации ведения домашнего хозяйства
Получается идея автоматизировать часть работ по хозяйству.
Типа Умный дом, но более сложная штука, на семью из 1 и более человек.

Это такой комплект софта и оборудования, который повышает эффективность ведения домашнего хозяйства.
Вернее, разгружает владельца от части этих забот и их контекста.

Функциональность:
-Инвентарь - учет предметов в хозяйстве.
-Планировщик - получается АРМ владельца
-Органайзер - модульный: Контакты, Финансы, итп.
-Собственно автоматизация разных фишек умного дома - все управляется из одного места, так удобно настраивать.
-Хранилища контента? Типа фоток, музыки итп, Приватных видео...
-Без доступа в Интернет!
-Проекты - ведь придется своими руками делать полки, стулья, ремонт, итп.
На них, по-хорошему, надо делать проект, чертежи. Тогда в этом проекте можно хранить историю работ и удачные решения.    
    
+++Улучшения
Раньше знания считались ценностью - их было мало, а производительных сил - больше.
Сейчас знания - не такая уж ценность - их теперь получить легко (пока еще).
А вот производительные силы теперь сложно привлечь - кругом чужие интересы итд.
Поэтому теперь ценным является способность производить изменения в окружающем мире.

Мне сейчас наиболее ценным являются два пути:
- повышение производительности моего труда - я как производитель успеваю больше сделать или быстрее.
- приобретение дополнительных производителей - например, Оператор, роботов итд. 
Способных самостоятельно выполнять хотя бы отдельные работы.
Не считая работ по самообслуживанию, которыми я сейчас в основном занят.

Поэтому проект Оператор важен. Но он пока может только работать с тем, что заведено в компьютер.
И то это очень простые работы. И их алгоритмы мне самому приходится создавать.
Это нехорошо - надо чтобы я был действительно разгружен от работ, которые выполняет Оператор - а я вынужден писать для него программы, которые к тому же исполняются недостаточно повторно. Не получается существенной разгрузки от работ.

Чтобы была эта разгрузка, нужно заводить в Оператор сущности из речи, желательно прямо, чтобы Оператор понимал мою письменную речь.
Тогда я смогу более просто формулировать задачи итд.

Но это определенно очень сложный процесс. Мне нельзя пытаться охватить сразу все области работы.
Я должен сначала сосредоточиться на одной области моей деятельности, добиться в ней успехов и потом развить это на остальные области.
Тут сейчас надо описать это: надо найти область деятельности и попытаться описать, что я хочу в ней получить в этом плане и как это должно выглядеть.
Это такой набросок, концепт того что должно принести небольшое улучшение в моей деятельности.
Есть предложение сделать это для областей: Инвентарь и Задачи. Они взаимодополняют друг друга и позволят улучшить мои возможности по планированию и выполнению задач и проектов. И это знакомые мне, предметные области, в них у меня есть и начальные данные и немного опыта работы.
- То есть, Оператор надо для начала науськивать на работу с предметами как материальными ресурсами для задач, и проектами и задачами.
  Но станет ли он в итоге такого проекта исполнителем, который реальную работу выполняет, разгружая меня от части задач?
  Вроде как нет - планирование задач у меня пока достаточное, это не критически важно, а  выполнять работы по задачам все равно мне придется. 
  Это просто разгрузит меня от мелких работ, я про них забуду, и это может иногда заводить проекты в тупик, из-за несовершенства управляющей программы.
-  сейчас, если повезет, я из оператора могу сделать помощник, который требует непосредственного руководства, но способен выполнять несложные работы под моим контролем. На что-то более сложное нужны новые идеи и опыт их использования.

Для анализа текста потребуется большая база сущностей, классов сущностей итд. Ее можно заимствовать из текстов, но и ручной работы там много. Пока нельзя даже сказать, насколько много. 
-Ну вот, я уже увлекся мыслью, больших масштабов. А мне нужны решения практичные - небольшие, несложные, часто используемые. Они будут экономить мое время и улучшать мою производительность. Но пока ничего такого мне не вспоминается.    
    
    
    