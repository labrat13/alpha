++ Заметка Представление Методов С Помощью РИ

ИИ представление методов с помощью речевого интерфейса.
Методы вводятся текстом. Очевидно, будут речевые аналоги для всех операторов, которые обычно используются в коде. Для начала кода, для конца кода, для авершения метода, для прерывания цикла, для окончания цикла, перехода цикла, начала цикла, формулировки для обозначения циклов итд итп. И текстовые конструкции, аналогичные языку программирования. И эти тексты мы вбиваем в Оператора, который потом их где-то размещает и исполняет. Некоторые решения я могу позаимствовать из проекта Math. 
Дальше этот чудо-проект нам что-то должен дать. Номера строк вроде бейсика не годятся. Можно вводить аналоги меток, только описывать их как-то особо, вроде  Метка. Или лучше описывать весь блок как он есть, его назначение итд. Это такой комментарий, который охватывает определенный участок алгоритма. и редставляет собой такую группирующую сущность, такой блок операций алгоритма. Который выполняет определеную работу, реализует некоторую цель. Отдельная часть алгоритма которая встроена в алгоритм, но могла бы быть вынесена в отдеельную функцию Но не вынесена по причине разных зависимостей и параметров. Такой блок можно описать как граф из блоков, которые имеют некие смыслы.
Такая сложная конструкция означает, что весь код неправильно спроектирован. 
В шарпе я обычно такие блоки обозначаю собранными вместе строками кода, которым предшествует комментарий, описывающий блок. Потом пустая строка и дальше идет другой блок. 
В алгоритме еще нужны комментарии. 
Общий алгоритм собирается из отдельных сообщений. Алгоритм хранится в памяти оператора, чтобы потом его оттуда достать и исполнить. (Вот сейчас я своими рассуждениями демонстрирую эту теорию о наблюдении путей в графе, проходя каждый раз с начала, надеясь свернуть куда-нибудь и описать еще одну ветвь этого графа. Это долгая работа.)
Получается такая система, которая по мере эксплуатации наращивается, и в один прекрасный момент становится слишком большой, чтобы что-то там найти. И тут можно применить статистику, выделить шаблоны, а все остальное убрать в архив, оставив только то что не укладывается в шаблоны.
Мы запускаем такую систему, используем ее, а дальше оно само накапливается, подстраивается и делается. И вся эта штука в результате то же самое, что если бы я на каждую операцию писал бы скрипт для исполнения через консоль. Вместо того, чтобы вручную выполнять операции, я бы составлял бат-файл и складывал бы его в одну папку где-то, чтобы они все были доступны из терминала. Потом в терминале набирал бы название команды, и она бы их исполняла. И тут надо эти скрипты писать и соблюдать определенные правила, и переписывать часть программ, чтобы эти правила соблюдались все время. То все бы работало, и не надо былобы ничего мне изобретать. Только помнить, как эти скрипты называются придется. И скриптов этих было бы дофига.  