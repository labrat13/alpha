++ Руководство По Созданию Сборок Процедур
Черновик руководства для разработчика сборок процедур для Оператора.
Состояние: пока тут недостаточно материалов по Сборкам Процедур.
- todo: Надо описать обязательный набор классов и функций, которые нужны для подключения и обслуживания СП.
- todo: Надо привести пример функции-обработчика Процедуры и описать ее аргументы и возвращаемые результаты.
- todo: Надо завести версию этого документа и отмечать ее.
- todo: Надо выявить тодо, задачи и вопросы в этом тексте и как-то их решить.
- todo: Надо вынести это руководство в отдельный документ либо как-то оформить в комплекте документации.

Я хочу сделать из этого документ: Руководство по созданию сборок процедур для Оператора. 
 Чтобы использовать его самому или дать другим для того чтобы они могли самостоятельно создавать сборки процедур для Оператора.

* todo: добавить сюда материалы из кода проекта, там тоже есть кое-что про устройство сборок процедур.
* todo: Надо спроектировать интерфейс движка Оператора к СП, чтобы отделить Оператор от СП, написанных неправильно или умышленно.
    * Пока со СП все довольно неопределенно. Непроверенные предположения. Нужен опыт использования.

+++Сборка процедур
СП это:
* папка - дистрибутив СП  - обычно (предположительно) архивированная папка (для удобства распространения и хранения в качестве дистрибутива)
  * файл сборки *.dll - собственно СП.
  * папка ресурсов СП
    * файл ресурсов СП *.* - некий файл ресурсов абстрактный
	* утилита.exe  - одиночная утилита
	* подпапка Wget - так как это не одиночная утилита и требует вспомогательные файлы.
	  * wget.exe   - собственно утилита wget
	  * wgetrc.ini - файл настроек wget

Утилиты это обычно одиночные исполняемые файлы, хранящиеся в одной папке ресурсов сборки.
Но также в СП могут использоваться приложения, которые распространяются в виде собственных инсталляторов, требуют установки в операционную систему, 
часто вручную. Нужно установить эти приложения и прописать в Процедурах пути к их исполняемым файлам. Вручную это неудобно, долго и чревато ошибками.
Чтобы уменьшить число ошибок, нужно предусмотреть Мастер Установки СП. Он и будет вести весь процесс установки СП. 
Это консольная Процедура, которая выполняет проверки установку СП, выполнение Процедуры Инициализации СП, 
поочередный запуск таких инсталляторов дистрибутивов, запрос у пользователя путей к установленным приложениям, откатывать установку СП при ошибке возникшей в процессе установки.	  
- для отката неудачной установки СП нужно вести ее под транзакцией в БД.
- нужно вести лог процессов установки и удаленияСП, это облегчит разработку процесса инициализации и удаления СП и создание самой СП.

+++О БД Оператора
* В БД нужно вести транзакции:
  * для процессов установки и удаления СП.
  * для любых процессов изменения данных БД (изменение, добавление и удаление Мест и Процедур)
* В объект Процедуры (в запись таблицы процедур в БД) надо добавить поле для названия сборки, содержащей эту процедуру.
Для Команд, созданных пользователем, это поле должно иметь значение User или Custom.
Для Команд, импортированных в Оператор из некоторой Сборки Процедур (СП), там должно храниться название сборки, содержащей эту процедуру.
- тогда легко будет удалить СП и процедуры, содержащиеся в ней, из Оператора (и БД Оператора).
  Просто выбрав их по значению этого поля - названию удаляемой сборки.
  
+++Операции с СП
* Импорт Сборки Процедур в Оператор
* Экспорт СборкиПроцедур из Оператора (? как быть с самим кодом сборки?)
* Проверить, установлена ли СборкаПроцедур с указанным названием.
* Вывести список установленных Сборок Процедур (и их номера версий)


+++Файлы-ресурсы сборки процедур
Это файлы, которые используются Процедурами сборки при выполнении команд. Обычно это утилиты вроде ping.exe  или wget.exe, и они также могут содержать собственные файлы настроек, итп.
 Если эти утилиты содержат собственные дополнительные файлы, их лучше поместить в подпапки, чтобы они не превратились в свалку.
 
Поскольку разные сборки могут использовать разные файлы ресурсов с одинаковыми названиями, то надо файлы ресурсов каждой сьорки держать в собственном каталоге под сборкой. А не в одном общем каталоге ресурсов Оператора, как ранее предполагалось.
- Но как тогда подставлять пути к ним при исполнении Процедуры?
А) Прописывать актуальные пути в свойства Процедуры сразу при установке СП в Оператор.
 - неудобно.
Б) Подставлять пути при вызове Процедуры, беря их из поля названия сборки в свойствах Процедуры.
 - тоже непонятно как.
TODO: надо продумать этот вопрос лучше.
- а как это делается сейчас? 
- Значит, команды из одной СП не могут использовать утилиты из другой СП?  
   Ведь к ним будут подставляться неправильные пути. И неизвестно, установлена ли в Операторе эта другая сборка.
   СП функционально должны быть самодостаточными, унитарными единицами.
   
+++Версии Сборок Процедур
* Каждая СП должна иметь уникальное название и номер версии.
* Версию СП следует хранить в виде ВерсииСборки и ВерсииФайла .dll
* В Операторе сейчас не могут сосуществовать разные версии одной и той же СП. 
Так как автомат все равно будет исполнять только одну из дублирующихся команд. У пользователя нет возможности выбрать для исполнения другую версию Процедуры.
* Так как учет СП идет только по их названиям, версии СП не требуют специального внимания в коде Оператора.
* При выводе на экран названия СП, надо выводить и ее версию. Например, в команде Вывести список установленных Сборок Процедур.

+++Создание сборки процедур
* Рекомендуется создавать СП с помощью среды VisualStudio 2008 Express, которую можно добыть на некотором DVD-диске журнала Ксакеп.
(TODO: Но и мне надо сначала весь проект  пересобрать на этой версии студии, а то нехорошо получается...)
* Свойства проекта СП:
  * Платформа: х86 (иначе БД Аccess не будет работать на х64 Windows 7 и 8)
  * Версия NET Framework 2.0
  * ?
  
+++Изменения в архитектуре Оператора
* Надо отделить движок от консоли, вынести его в отдельную сборку. Так как класс движка импортируется в СП.
   Это позволит сторонним разработчикам переопределять потоки сообщений - выводить их в устройство голосового вывода, например.
   Но это надо всю архитектуру Оператора перепроектировать.
* Надо разделить архитектуру Оператора на открытые и закрытые части. 
  Открытая часть - ее исходный код может публиковаться, чтобы пользователям не было скучно.   
  Закрытая часть не должна публиковаться, это отвадит немного скорохватов от идеи все скопировать и продать кому попало.
  И еще, это разделяет архитектуру на части, легкие в модификации, и трудные. (Занятная отмазка?)
  Тапп вот, к примеру, трудная часть. А консольный интерфейс без Движка - легкая часть.
  Легкие части опубликовать можно, в них ничего важного и нету.
  Тяжелые части - там много тонкой работы и отдавать их на сторону - провалить весь проект.
* Также, в СП импортируется атрибут, сигнализирующий о том, что данная функция - это обработчик для Процедуры.
* Код Движка должен вызывать из СП Процедуру Подключения СП и Процедуру Отключения СП. Эти процедуры должны иметь фиксированные названия, размещаться в классе с фиксированным названием, в СП.
  
 
  


