++ Другой Способ Приложений

Другой способ автоматизации работ на компьютере:
- не изготавливать сразу Оператор с РИ,  а пока использовать консольные утилиты командной строки.

Утилиты надо сначала создать, как набор инструментов для некоторой предметной области.
И использовать для задач, которые у меня возникают.
Как это сделать?

- Надо записывать эти мои возникающие потребности. Чтобы затем их список проанализировать, выявить задачи автоматизации и создать инструменты для решения этих задач.
  - Записывать надо куда-то, в список. Этот список должен быть всегда на виду, под рукой, чтобы вспомнить про него в рабочем процессе и сразу воспользоваться.
  - Надо записывать достаточно подробно, чтобы через месяц можно было понять, что собственно требовалось и что имелось в виду. Форма записи должна требовать это от пользователя, то есть, меня.  

- Надо придумать, как находить инструменты, когда они нужны. Их можно наделать и сложить в каталог, вроде моего Навигатора. Но надо помнить, что они есть, где они лежат, как они называются, чтобы применять их в момент потребности в них.

- Инструменты могут быть изготовлены только для определенной области деятельности. Например, обработка текстов, обработка файлов, итп. (Для файлов есть пример инструментария: Тотал Коммандер.)

- Желательно утилиты делать с несколькими режимами применения: пакетным, интерактивным, клипбордным.
  - пакетный режим: для обработки отдельных файлов и массивов файлов. Это классический режим утилиты командной строки.
  - интерактивный режим: Для сложной обработки единственного файла или документа непосредственно пользователем. Это классическое GUI приложение.
  - клипбордный режим: Преобразование содержимого буфера обмена ОС. Например, в текстовом редакторе нажать Ctrl+C, вызвать утилиту, нажать Ctrl+V. 
     В некоторых редакторах утилиты можно вызывать непосредственно из меню редактора, если туда их предварительно прописать.
     Для других же можно держать в трее значок программы-каталога, или в меню Пуск держать каталог этих утилит.
     - Еще можно назначить глобальный хоткей для подобной утилиты, но тогда надо помнить эту комбинацию клавиш. 
       Это годится только для популярного, часто используемого алгоритма. 
       У меня это не приживется, так как я часто меняю предметные области в своей деятельности.  

- Для клипбордных утилит потребуется разработать специальный класс консольного приложения, который может работать и в пакетном режиме, когда утилите передаются аргументы, и в клипбордном режиме, когда утилита вызывается без аргументов.
  Он должен служить оболочкой для алгоритма инструмента, работать с клипбордом и обрабатывать ошибки, возникающие при работе алгоритма.
  Такой класс позволит ускорить создание утилит.

- клипбордные утилиты - новый класс для моих программ. У меня нет опыта их использования.

- проблема утилит - надо подобрать для них понятные, однозначные и короткие названия. Сейчас это не всегда удается сделать.
  Хотя при продолжительной работе эти названия можно запомнить, но у меня нет таких продолжительных работ. У меня они все отрывочные, короткие, как бы случайные.

- Получается, процесс моей работы надо изменить: Если в ходе работы возникает задача "Сделать Х", то надо остановиться, сформулировать задачу, записать ее в список потребностей.
  Если для такой задачи уже есть инструмент, надо найти его в списке, прочитать описание использования, применять инструмент для решения задачи.
  - Следовательно: Нужен легкодоступный список моих задач-потребностей. Для каждой потребности нужно описать суть потребности, условия и прочий контекст.
     К каждой записи потребности можно позднее прицепить утилиту-инструмент. Для каждой утилиты нужно иметь инструкцию процесса ее использования.
  - Проще будет завести такой список потребностей, и в нем искать утилиту. А если не нашел, то описывать суть проблемы, чтобы позднее изготовить утилиту по этим требованиям.
    Это можно представить себе так, словно я не разработчик, а только пользователь, который при каждой проблеме пишет разработчику письмо с просьбой написать утилиту.
     Это психологически сложно будет реализовать.
  - А изменить процесс работы будет сложно. Чтобы его изменить, нужно уже иметь большой набор инструментов, собранный, организованный, отлаженный. 
     Тогда я буду на него рассчитывать в процессе работы. А тут предлагается формировать его с нуля в процессе работы. 
     Так не получится. Надо сразу изготовить 60% общей функциональности и потом дополнять его набегами и волевым усилием.
     И завести этот набор инструментов как отдельный мой проект. Чтобы дополнять по мере возможности.
     И добавить напоминание в календарь планировщика, а то я забуду про него совсем. Ведь это не Значимая Цель, это лишь инструменты для обыденной работы.

- Утилита реализует некий Алгоритм. Вопрос: как выбрать этот алгоритм? Быстро, во время работы в некотором приложении. А не в специальном поиске инструмента. 
  Как узнать, что он есть, если сам не помнишь? Помнить - неправильно! Надо избегать этого.
  Как искать - я пока не знаю. Надо сопоставить свое описание проблемы-потребности и утилиту-алгоритм. Описание обычно расплывчатое, неформальное, зависит от ситуации, использует неверные термины и аналогии. 
  Даже человек не всегда может понять из описания, что именно требуется. 
Хорошо, когда есть перед глазами список утилит-инструментов. Например, в меню приложения. Для текстового редактора это просто. Но нужны и другие средства для автоматизации.

Общий обзор: Это в целом выглядит сложной проблемой. Точечная реализация проблемы автоматизации не складывается в общий механизм, это приводит к тому, что инструмент не используется / не всегда используется в подходящих для этого случаях.
 И это кусочная автоматизация процесса: автоматизируется часть ветви процесса, а стыковки автоматического и ручного выполнения процессов выполняет человек.
  В таком случае, стыквки могут оказаться сложнее чем сам автоматизированный процесс.
       
 