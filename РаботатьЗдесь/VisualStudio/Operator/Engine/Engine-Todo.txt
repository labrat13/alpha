

Задачи и замечания по приложению Оператор-1.

31 июля 2016
+ ранее я накидал основные классы сущностей проекта
  - Place - представляет используемую пользователем сущность, например, определенное место. 
  - Procedure - представляет процедуру.
+ сегодня добавил классы для поддержки типов аргументов и мест
  - EntityType  - описывает класс сущности для семантического анализа.
    - набор функций не лаконичен, можно бы переделать на более адекватный.
  - EntityTypesCollection - словарь классов сущностей для использования в разных местах кода
    + сейчас содержит парсер выражения описания классов сущностей. Парсер протестирован, работает.
    - набор функций не лаконичен, можно бы переделать на более адекватный.
+ добавил определение типа регулярного выражения в класс процедуры Procedure
  + и енум результатов определения типа процедуры RegexType
+ нужен еще сделать класс списка процедур, раз уж они в памяти будут храниться а не в БД.
  + ProcedureList created 
+ все функции регекса вынести в собственный класс регексов. Там будут еще несколько функций.
  + RegexManager created
+ сделал участок для тестов в Program классе приложения - там проводить все тесты.
  + лучше вынести тесты в отдельную функцию, чтобы не захламлять основной код комментариями тестов.   
  
2 августа 2016
+ накидал почти весь код, хотя очень сумбурно. 
- приложения уже можно привязывать к процедурам и запускать. 
   Хотя могут быть проблемы с исполнением из-за грязного кода.
- Осталось сделать загрузку и запуск функций из сборок.
  - вроде накидал, надо отлаживать.
  - и еще теги тодо поискать и выполнить.
  
- Надо написать несколько процедур и несколько мест для отладки процесса.
   Это могут быть сами процедуры добавления, просмотра и удаления процедур и мест.
   Их все равно надо делать. Но им нужен вывод на экран.
- Надо сделать вывод на экран и принятие ввода ивентами, привязываемыми к консоли.
- Надо передавать вывод из запускаемых приложений в это окно консоли.
  + для процедур из сборок - проверено.  
- Надо передавать в запускаемые функции объект движка для всяких возможностей.
  - сделано, но пока рекурсивно запускать выполнение не предусматривалось.
- надо провести тестирование работы приложения в части имен и значений аргументов 
- надо составить представление о том, для чего можно применить это приложение сейчас.
- надо подготовить каталоги и всю инфраструктуру для опытного использования приложения.
- надо описать эту инфраструктуру и эти правила использования в страницах вики.
- есть идея добавлять процедуры в общую коллекцию, импортируя их из сборок. 
   Таким образом, сборки будут сразу и контейнерами все-в-одном для процедур определенной темы.       
+ создал сборку для кода процедур.  

Провел первый запуск процедуры из сборки.
- сборка должна находиться в каталоге приложения. 
Но студия не помещает ее автоматически в каталог приложения, так как сборка зависит от приложения, а не наоборот. 
Тут можно только предложить развязать приложение и сборку, вынести все класс используемые сборкой - то есть, все классы вообще, в отдельную промежуточную сборку движка.
И это все равно не решит проблему. Сборки придется добавлять в каталог приложения вручную или через рукописный скрипт после компиляции.
- сообщения текстовые из сборки в окно консоли проходят.
- выборка и исполнение процедуры без параметров тестировано.
- код все-таки слишком корявый, отлаживать неудобно, не линейно оно воспринимается.

Провел тест с процедурой Открыть %место и аргументами.
+ Создал места: браузер, мои проекты, мой сайт.
- пришлось отключить выдачу исключения при проверке командной строки перед собственно исполнением через ShellExecute.
  Так как нечем проверить что передается веб-адрес или что-то съедобное для ShellExecute.  
  Но надо все же это обустроить, а то отладка будет слишком сложной.
+ работает, папка и браузер и сайт открываются.  
- Пришел к выводу, что надо разрабатывать теорию и методику для типов мест, 
   для общей организации всего процесса работы. И надо обеспечить отладку и контроль визуальный процесса 
   исполнения с точки зрения пользователя, а то он должен будет все время лезть в студию чтобы проверить, 
   что и почему не работает, и как вообще все работает. 
   Но если пользователю дать понимание процесса и всю эту теорию, то он может собрать собственную систему.
   И затратит на это меньше времени, так как большую часть работы я уже сделаю для этой системы.
   Отсюда вывод: не распространять систему без гарантии прибыли. 
- похоже, процедуры управления местами и процедурами надо встроить в код приложения. 
   Тогда они точно будут доступны постоянно.
   - но без БД в этом нет смысла - новые данные надо где-то хранить.   
   - и все равно нужны процедуры из кода, а их без студии не создать.
- появилась идея автоматически добавлять в места приложения установленные в операционной системе.
  Или, лучше, то, что вытащено ярлыками на рабочий стол.
  Но могут быть проблемы, в частности - типы сущностей надо задавать. 
  Пользователь не сможет свести все в единую классификацию сущностей.
  Чтобы потом вручную описывать для каждой сущности правильные отношения типов.    
  А без этой классификации и смысла нет в поле типа сущности и проверках типов.
  А без проверок типов сущностей большая часть возможностей системы не готова для надежной работы и не сможет использоваться.
  То есть, функционал системы будет небольшим.
  Вот сейчас я проверок типов не делаю, вот и посмотрю, что получится.
- теперь надо начать пользоваться приложением: надо создать место для хранения тестовой версии приложения, 
   и создать ярлык для запуска приложения на рабочем столе.
  - сначала надо исправить все недоделки и обеспечить сбор необработанных запросов.
  - И для записи возникающих идей тут же надо что-то придумать.
- может быть две методики называния команд как обращение к персоне - личное и  безличное: "открыть" и "открой".
  Надо или придерживаться одной из них постоянно, или делать обе версии одной и той же процедуры.
- и все же консоль напрягает - ее надо запускать специально или держать постоянно запущенной. 
   Лучше бы она в трее висела, и запускалась при входе пользователя сама.     
   Хотя нет, в трее она будет так же не при делах, как там уже есть органайзер. 
   Лучше ее на рабочий стол как-то поставить но фоном или еще как, 
   чтобы не мешала при работе, но всегда была под рукой, когда что-нибудь требуется.
   
05 августа 2016
+ добавлена сортировка списка процедур по весу. Написан предикат для сортировки, и его вызов. Проверено, ОК.
+ добавлена процедура с максимальным весом, обрабатывающая чисто запрос. 
   Теперь все нереализованные запросы будут попадать к ней.
- надо ли в коде-набивке процедур разделять их в тексте по весу или по теме?
- надо бы группировать места по их классу сущности, чтобы показывать пользователю по группам.
- надо бы в интерфейсе сделать (например, для групп сущностей) вывод менюшкой текстовой с буквами нумерации. Вроде А)Приложения.
  И чтобы пользователь нажимал на клавиатуре только букву для выбора пункта меню. 
  А esc или другая кнопка - возврат из текущего меню в предыдущее.
- надо показывать пользователю списки мест и процедур.
- изучал вопрос с будильником. Он работает только если компьютер в спящем режиме. 
   И вероятно, он не будет работать в виндовс 8. Но это надо проверять еще.
   А так, код я нашел. Можно написать прототип.
   - можно использовать планировщик, если удастся из-кода назначать ему задания. 
      Тогда просто нужно разбудить компьютер к моменту начала сигнала, просигналить, 
      поставить эту же побудку на следующий момент будильника, и снова спать если нужно.
   - эту процедуру удобно было бы задавать скриптом, а не кодом процедуры.
     Нужны составные скриптовые процедуры, состоящие из вызовов процедур и дополнительной обвязки из операторов скриптового языка.
     Это тоже процедуры, и их тоже можно вызывать так же из скриптов   
- сейчас если набрать Открыть музыку, приложение просто закрывается. Это потому что срабатывает процедура Открыть %место, а места такого не найдено. 
   Что в это время открывается - надо посмотреть. 
   Поэтому надо это как-то проверять и обрабатывать такие ситуации.
   Что там вообще можно открыть, кроме места? Если ничего, то можно просто выводить сообщение, что место не найдено.
   + можно открыть все что в ShellExecute открывается.
     + можно ввести путь к файлу или папке: Открыть c:\Work\1600.jpg
     + можно ввести имя файла приложения вроде notepad.exe, но не любого установленного приложения. 
       Это тоже путь, но через переменную %PATH% виндовс. открыть calc.exe
     + можно ввести веб-адрес в формате www.meraman.com: открыть www.yandex.ru
     + можно ввести URI, в том числе Инвентарь. открыть 123:кт816
   - то есть, если это не путь к файлу, и не URI и не начинается с www. то это должно быть место. Иначе выводить сообщение о проблеме.
     - можно просто перехватывать исключение и: выводить сообщение или (лучше) возвращать код результата неудача.    
   + это вообще-то косяк - приложение закрывается и пользователь теряет контекст своей работы.
     + запуск приложений обернут в try catch блок, теперь при исключении процедура возвращает значение неподходящей.
        Вроде это решает эту локальную проблему. Поскольку вызываемое приложение не запустилось, то вроде бы состояние системы не изменилось.
         
- для проектов, заметок итд надо проектировать и делать хранилища-каталоги с АПИ и шифрованием и все такое по проекту Органайзер.
  Чтобы использовать их здесь.
- Процедуре нужно еще поле тип добавить и формат записи типа и парсер этой записи. 
   Чтобы сопоставлять процедуры и сущности автоматически.       
   
13 августа 2016   
+ сделано: после пробуждения компьютера после команды спать выдавалось сообщение Я такое не умею. 
   Теперь это исправлено.
+ сделано: при получении синонимов Места, из класса Place теперь выдаются только уникальные синонимы.
+ сделано: Если любой синоним Места уже существует в PlacesCollection, то новое Место с таким синонимом 
   не может быть добавлено. Оно удаляется из PlacesCollection и вызывает исключение с описанием причины.
   Так обеспечивается уникальность имен-синонимов Мест и корректность поддержания этой уникальности.
   (баг превращен в фичу!) 
      
      
25 апреля 2019
- Новая версия: Идея добавить БД и поддержку создания команд прямо из Оператора.
  - нужно внести изменения в концепцию Оператора
  - нужно внести изменения в архитектуру Оператора
  - нужна концепция сущностей хранящихся в БД.  
  - нужна схема таблиц БД
  - нужен класс адаптера БД
  - нужна схема нового исполнения команд Оператором     

1 июня 2019
- Надо более четко вести версии проекта. Почему-то более старая версия проекта оказалась использована в качестве кода.
  Версия сборки должна нумероваться четко по стандарту. 
  Тут путаница получилась, а это недопустимо в таких долгоживущих проектах с значительной теоретической сложностью.
- Адаптер БД не содержит функций изменения и удаления записей из таблиц. 
  - Его надо переработать и привести в соответствие с моим шаблоном адаптера БД.
  - потом надо добавить недостающие функции.
- Этот проект должен регулярно бекапиться. Надо проверить это.  
    
07 июля 2019
- исправил типы полей в БД таблицах процедур и мест на MEMO.
+ создал класс CachedDbAdapter и перенес в него коллекции мест и процедур, исправил функции движка, где они использовались.
  + Тестировал это исправление. Работает.
  - Теперь поиск в БД должен стать проще и быстрее, так как искать будем в памяти. 
+ сделал корректное закрытие движка при закрытии окна программы:  
  + добавил выключение кнопки Close с крестиком на титлебаре окна
  + добавил игнорирование комбинации Ctrl+C вместо ввода команды
    - теперь окно можно закрыть только по Ctrl+Break. При этом закрывается и БД более-менее корректно.
  - но если окно закрывается из диспетчера задач, то движок не закрывается.
+ перенес проверки слов команд выключения компьютера и сами эти слова в класс Lexicon.Dialogs 
   как более подходящее место - там я намерен хранить все слова-константы встроенных команд.
  + тестировал, работает. 
- накидал первый план диалога создания Места.
  + добавление нового места в БД происходит успешно. Пока оно заполнено мусором, но все работает. 
  - много надо новых функций в разных местах проекта сделать.
  - нужны функции описания Мест и Процедур однострочно и формой.
    + однострочные сделаны, не тест.
    - формой мноострочные надо сделать.
- все работы с БД и консолью из загружаемых сборок процедур должны вестись через функции Engine.
  Так БД итп защищается от проблем сборок процедур.
  Я эти функции начал немного создавать, но они все пока приблизительные очень. Не определился я с их составом.
  Собираю по мере потребности.
- в таблице процедур много избыточных, одинаковых полей, и названия столбцов не отражают назначения данных.
   Надо переработать там это. Сейчас там 4 поля, в которые надо ввести 4 почти одинаковых значения, 
   и я никак не пойму из названия столбцов, что куда вводить.
   Надо, что-ли, убрать одно из полей описательных, а остальные переназвать более понятно и специфично.

23 июля 2019
- сделал функции ввода синонимов мест в ProceduresInt.PlaceProcedures.
  - оператор goto оказался очень кстати. Надо его использовать в этих запутанных и длинных процедурах.
  - очень полезен оказался рисунок - блочная диаграмма алгоритма. 
    Я уже отвык их рисовать - обычно функции простые, я сразу понимаю, что там и как.
    Но вот для диалогов они незаменимы сейчас - там все так сложно, я упускаю варианты.
    А на чертеже сразу все видно.
    - Надо рисовать блок-схемы алгоритмов для диалогов! Обязательно! 
      Они кучу времени экономят и позволяют не думать при написании кода.
      Как бы еще себя заставить это делать...
  - нумерация пунктов плана при создании места - очень помогает пользователю при создании места.
    Без них непонятно, где кончилась процедура ввода синонимов места, и начался следующий этап собственно процесса создания Места.
    То есть, без них в выводе консоли нельзя различить процесс и подпроцессы.
    Поэтому обязательно надо вводить нумерацию пунктов в диалоге процедуры!
  - решил добавить цвета в диалоги консоли.
    - сделал енум DialogConsoleColors с цветами для консоли.
    - добавил его в код. Получилось цветисто, но есть недостатки:
      - не весь вывод на консоль использует эти цвета - только в коде процедур пока.
        Но я думаю перевести все обращения к консоли в отдельный класс, тогда весь вывод будет легко переподчинить и раскрасить.
      - консоль в итоге выглядит пестро. Часть пунктов диалога - вопросы, часть - сообщения. Хотя можно привыкнуть.
      - нужно описать правила использования этой цветовой схемы
      - код теперь будет сложнее - мало придумать текст, еще надо цвет дя него правильно выбрать...
- еще много недоделок в коде, часть отмечена тегами тодо.
- надо тестировать код создания места и записывать все проблемы на бумажку. Потом сразу все исправлять.      
                   
25 июля 2019
- Проблема автоподстановки Места вместо текста аргумента слишком существенная, как оказалось.
  Решено изменить класс FuncArgument - добавить в него поле ArgumentQueryValue - сырое значение аргумента до подстановки Места в качестве аргумента.
  Тогда по полю класса я определю, была ли подстановка Места, а из поля сырого значения получу текст аргумента до замены его на Место.
  - И придется на новую схему все существующие процедуры переделать. Но это легко.
  - И надо описать эту проблему и это ее решение и в коде и в вики. 
  - а можно ли просто объект места в аргумент добавить? копировать? Чтобы уже все поля тамбыли. вдруг пригодятся?
    -- думаю, это излишне. 
  - это будет версия 1.0.2.6 Оператора.
  - переделки что-то пошли не так...
    + добавлено поле ArgumentQueryValue - для хранения текста аргумента в запросе.
    + добавлено поле объекта Места, в нем будет храниться копия объекта Места.
      Так процедура не сможет испортить оригинал.
      Но прочие поля аргумента по-прежнему перезаписываются значениями из Места, хотя они (поля) теперь не нужны ?
      TODO: надо это уточнить, всю эту штуку переработать.
    + добавлен конструктор копирования в Place
    + добавлена функция internal void FuncArgument.ПодставитьМесто(Place p)
      Она будет собственно подставлять Место (и копию объекта места) в аргумент.    
    - вся эта хрень что-то разрослась стихийно, надо ее переработать и ужать, выбросить лишние поля и функции из аргументов.  
    + исправлен код процедур в сборке ProceduresInt. Тестировано.
    - в целом, изменения упростили код для процедур:
      - если аргумент это место или текст - использовать поле ArgumentValue аргумента
      - если аргумент это только текст - использовать поле ArgumentQueryValue аргумента
      - если аргумент это только место - использовать копию места в поле AssociatedPlace аргумента
      - и есть проперти-флаг что место в аргумент было подставлено движком.
    - но все равно это костыль... Надо все это перепроектировать.    
- нужно добавить команду Удаления Места: удалить Место Х
  - тут автоподстановка Мест должна подставить Место, и это правильно. А если не подставит, значит Место не найдено.
- нужно добавить команду Просмотра списка Мест: показать Места /показать все места
  + "показать места" добавлено. Но какие свойства места показывать? Пока это название и путь.
- нужно добавить команду просмотра и редактирования свойств Места: показать свойства Места Х

- вообще, весь движок разросся, запутался, и я забыл как он устроен. Надо весь его перетрясти, пересмотреть, проработать устройство.
  Это важно, так как я думаю его расширять и дополнять. А вот не понимаю, как он сейчас работает, так много там недоделок.
  Надо все сделать более стройно и правильно.       
   
19 апреля 2020
- и забыл содержание проекта и делать неохота ничего.
- начал процедуру добавления команд, но не закончил. Там нужно планировать всю ее, а я забыл что и как.
- классы Places Procedures надо переделать - произвести от общего базового класса.
  - UAMX ?
+ Функции консоли вынести из движка в класс консоли, в движке сделать объект консоли и через него все эти функции вызывать.
  Сейчас они в движке занимают место, их надо вынести отдельно.
  + сделано 26 апреля 2020
+ надо сделать в коде класса Движка группировку функций регионами. Там сейчас слишком много функций.               
  + сделано 26 апреля 2020 

26 апреля 2020
- вынес функции работы с консолью в новый класс DialogConsole и переместил его и его обвязку в подпапку Lexicon проекта.
  + создал и прицепил к движку этот новый объект - обертку консоли.
  + переделал все вызовы функций от движка на этот объект. Все вызовы во всех сборках и проектах.
  + добавил в DialogConsole объект CultureInfo русский, как проперти, теперь все функции форматирования могут его использовать, если им доступен объект движка.
  + наведен порядок с цветами сообщений Консоли
  + компилируется.
- цвета текстов сообщений: енум DialogConsoleColors
  - ВводПользователя = ConsoleColor.White, Цвет текстов, введенных пользователем. 
    - Визуально отделяет тексты пользователя от всех остальных, облегчает восприятие смысла текста в консоли.
  - Предупреждение = ConsoleColor.DarkMagenta, Цвет выводимых в консоли предупреждений.
    - Этим цветом должны обозначаться все предупреждения, сообщения об исключениях, нефатальные ошибки процессов Оператора.
  - Вопрос = ConsoleColor.DarkYellow, Цвет выводимых в консоли вопросов пользователю.
    - Этим цветом должны обозначаться все запросы/вопросы к пользователю.
  - Успех = ConsoleColor.DarkGreen, Цвет выводимых в консоли подтверждений об успехе.
    - Этим цветом должны обозначаться все сообщения об успехах.
  - Сообщение = ConsoleColor.Gray, Цвет для всех прочих текстов, выводимых пользователю.
    - Этим цветом выводятся все тексты, не относящиеся к вышеуказанным категориям.  
    
1 мая 2020
- сделал процедуру "Создать команду Х" и процедуру "Показать команды".
  - наскоро тестировал - успешно.
- надо собрать новый дистр Оператора в один комплект, и исходники в архив упаковать под датой, чтобы иметь точку отката для последующих экспериментов. 
  + исходники упаковал в архив-снимок.
- надо привести Места и Процедуры к единому базовому классу
  + привел - класс Item
  - и затем унифицировать их кеш-коллекции в адаптере БД
+ надо удалить из объекта Процедуры и таблицы процедур поле cmd, оно не используется.
  - и оно не позволяет пустых значений.
  - и код, использующий это поле, переделать.
  + удалил поле из БД, адаптера БД, кода в других частях проекта.
- надо переделать в текстах Процедура и Команда - на правильное использование. Сейчас там в этих терминах путаница.
- надо добавить в БД функции Удалить Место и Удалить Процедуру, и Изменить Место и Изменить Процедуру.
  - и потом - поставить задачу добавить процедуры и команды для удаления и просмотра-редактирования мест и процедур.
- надо собрать новый дистр Оператора в один комплект, и усходники в архив упаковать под датой, чтобы иметь точку отката для последующих экспериментов.           


22 мая 2020
- (тег 22052020) команды, начинающиеся с 2 не-русских символов любого регистра, передаются в Терминал Виндовс для исполнения.
  Это значит, из Оператора можно запускать англоязычные команды для cmd.exe.
  Например, wget. Рабочий каталог для них = Мои документы.
  
25 мая 2020 версия 1.0.5.10
- в процессе выявлены события "Поступила новая команда" и "Неизвестная команда". 
  Для них сделаны фунции-обработчики в Engine, которые сейчас используют ранее созданный код.
- Добавлен класс пред-анализатора команд Lexicon.CommandAnalyser, пока как заглушка. 
  В него передается запрос команды и оттуда оно все запускается на исполнение.
  - пользы от него мало, так как надо переделывать всю архитектуру системы.
    Он может только исправлять глаголы в команде на нормальную форму: ищи => искать. 

09 ноября 2021г версия 1.0.7.12
- релиз для публикации на гитхабе. Для x32 и x64 платформ Виндовс.
	Доделать старый-новый релиз:
	+ установить свойства всех сборок проекта
	+ установить платформу солюшена как Любую.
	+ скомпилировать дебаг и релиз - версии Оператора
	+ собрать комплект для тестирования релиза: бд и файлы - из ЛокальныеИнструменты, а библиотеки и экзешники - из проекта.
	+ проверить что приложение запускается.
	+ почистить БД от лишних Мест  и Команд.
	+ собрать установщик и опробовать установку приложения.
	  + лучше как есть в зип-архиве предлагать.
- TODO: требуется решить задачу: как автоматически наполнять список мест на компьютере пользователя.	
- Старые записи: Пока будем держать Места иПроцедуры в памяти приложения.
Сами процедуры и места хранятся в БД, но из нее распаковываются в память и там реально хранятся и поиск ведется там же, а не в БД. 
	- но при добавлении мест и процедур в БД приходится перезагружать списки из БД, чтобы отразить изменения.
	- и хорошо бы перенести эти кэширующие коллекции в объект адаптера БД. 
		Чтобы они уже функционально были вместе с самими данными, и проще было их синхронизировать и оптимизировать, выборку данных делать, итп.
		А то они снижают модульность архитектуры проекта Оператор.
	- перенес коллекции в производный класс CachedDbAdapter
- TODO: Надо прочитать все предыдущие записи этого файла и выбрать из них задачи для решения по этому релизу!	

14 ноября 2021г
Список задач:
1. Выписать задачи из файла ТОДО проекта.
2. Реализовать новую систему подключения сборок методов - я ее разработал, но недостаточно.
  Пора ее проверить в деле.
3. Ожидать готовности проекта Тапп для подключения в Оператор. 

12 Февраль 2022
Что изменить в Оператор-1:
1. Изменить запуск команды так, чтобы она отдельным вызовом функции запускалась после получения запроса от пользователя.
- второй запуск команды будет происходить при обработке кода возврата первой команды.
- это нужно для переопределения встроенных команд Оператора
2. Переделку регекса в обычный проводить в процессе загрузки Процедуры из БД
- создать дополнительное служебное поле String для готовго регекса, не сохраняемое в БД.
- функции движка переопределить на использование этого поля вместо генерации.
3. Определение типа Процедуры: Метод класса сборки  или внешний исполняемый файл - проводить в процессе загрузки Процедуры.
- создать дополнительное служебное поле Bool для типа Процедуры, не сохраняемое в БД.
- функции движка переопределить на использование этого поля вместо генерации.
4. Создать функции для проверки формата поля регекса Процедуры при создании Процедуры.
5. Создать функции для проверки формата поля пути Процедуры при создании Процедуры.

==============================================================================
Задачи и замечания по проекту Оператор-1.1 
==============================================================================
30 сент 2022
- прочитать и выписать сюда нерешенные задачи из предыдущего текста.
- к проекту подключена БД SQLITE, референс взят из dll сборки из ..\ЛокальныеИнструменты\sqliteDeploy\appFolder\System.Data.SQLite.dll
  Это для 2 фреймворка, будет ли работать в 3.5 - я не знаю.
  - Перед отладкой проекта надо туда скопировать все остальные длл из папки БД, как написано в ее инструкции.
  - сборку фреймворка 3.5 я пока не нашел, как будет это работать - не знаю. Тут еще много возни.
  - этот референс удален, взят nuget загруженный из интернета, подключен к проекту.
    Но если не будетработать, то лучше заново подключить к проекту сборку из ..\ЛокальныеИнструменты\sqliteDeploy\appFolder\System.Data.SQLite.dll
    Она работать будет, но это по совместимости. Для порядка лучше найти сборку согласно версии фреймворка.
 - Бд не создана, скрипты sql я не нашел тут, но где-тоони есть вроде бы. 
   Бд должна создаваться кодом при первом запуске Оператора, но там еще настройки надо брать из файла настроек Оператора, вроде бы.
   Там надо разбираться, по мере портирования проекта.


05 октября 2022
Список классов по неймспейсам для портирования: TODO: отметить тут уже портированные классы и енумы. И замечания, по классам если они короткие. Если длинные - писать после этого списка.  - 
- DbSubsystem
  - OperatordbAdapter           - ported, NT
  - PlacesCollection            - ported, NT
  - ProcedureCollection         - ported, NT
  - SqliteDbAdapter             - ported, NT
- LexiconSubsystem              - need             
  - BCSA                        - need refactoring для диалога консольной винды
  - DialogConsole               - need refactoring для диалога консольной винды
  - Dialogs                     - need refactoring для диалога консольной винды
  - EnumDialogConsoleColor      - need refactoring для диалога консольной винды
  - EnumSpeakDialogResult       - need refactoring для диалога консольной винды
- LogSubsystem                  - need
  - EnumLogMsgClass             - ported, RT
  - EnumLogMsgState             - ported, RT, need refactoring - не определена роль этого в системе сообщений лога.         
  - LogManager                  - deleted, replaced from LogManager2 class
  - LogManager2                 - ported, renamed to LogManager, NT
  - LogMessage                  - ported, NT
- OperatorEngine                - need
  - ArgumentCollection          - ported, NT
  - ElementCacheManager         - need
  - Engine                      - need
  - EngineSubsystem             - ported, NT
  - EntityType                  - ported, NT
  - EntityTypesCollection       - ported, NT
  - EnumProcedureResult         - ported, RT
  - EnumRegexType               - ported, RT
  - FileSystemManager           - ported, NT
  - FuncArgument                - ported, NT
  - Item                        - ported, NT
  - NamespaceConstant           - ported, NT
  - Place                       - ported, NT, refactoring
  - Procedure                   - ported, NT
  - RegexManager                - need
  - UserQuery                   - wait for dependency
- ProcedureSubsystem            - need
  - ImplementationState         - ported, RT.
  - LibraryManagerBase          - need
  - OperatorProcedureAttribute  - ported, NT
  - ProcedureExecutionManager   - need
- SettingSubsystem              - ported, NT  TODO: перепроектировать подсистему настроек под особенности Шарпа.
  - ApplicationSettingBase      - ported, NT
  - ApplicationSettingKeyed     - ported, NT
  - EnumSettingKey              - заменен на класс SettingKey, используется вместо енума. 
  - SettingItem                 - ported, NT
  - SettingItemCollection       - ported, NT, 
- Utility                       - 
  - FileUtility                 - 
  - InOutArgument               - создан для обхода ограничений JAVA  и вроде бы в проекте не нужен?
  - ItemDictionaryBase          - ported
  - ItemDictionaryByNamespace   - ported
  - OperatorVersion             - ported
  - SingleAppInstance           - need refactoring - file locking 
  - StringUtility               - need refactoring
  - SystemInfoManager           - ported, need refactoring
  - WindowUtility               - ported
- приложение Operator
  - Program                     - need
- библиотека процедур GeneralProcedures
  - LibraryManager              - need
  - PlaceProcedures             - need
  - ProcedureProcedures         - need
  - PowerProcedures             - need
  - SettingProcedures           - need
  - TestProcedures              - need
  - UnsortedProcedures          - need

  -------------------------------------------------------------------------------------------

